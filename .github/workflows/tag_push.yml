name: Building Release

on:
  workflow_dispatch: {}
      
  release:
    types: [unpublished]
  # push:
    # tags:
    #   - "[0-9]+.[0-9]+.[0-9]+"
    #   - "[0-9]+.[0-9]+.[0-9]+-beta.[0-9]+"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: pnpm
          cache-dependency-path: ./pnpm-lock.yaml
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          {
            echo 'STORE_PATH<<EOF'
            pnpm store path --silent
            echo EOF 
          } >> $GITHUB_ENV
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: |
            ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - uses: actions/cache@v4
        name: Setup cache for next.js
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies
        run: pnpm install
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        # Only install Snapcraft on Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.snapcraft_token }}

      - uses: maxim-lobanov/setup-xcode@v1
        if: startsWith(matrix.os, 'macos')
        with:
          xcode-version: latest-stable

      - name: Prepare for app notarization
        if: startsWith(matrix.os, 'macos')
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.provisioning_profile }}
          PP_PATH: build/mastouchtyper.provisionprofile
          API_KEY_BASE64: ${{ secrets.api_key }}
          API_KEY_PATH: private_keys/AuthKey_${{ secrets.api_key_id }}.p8
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p private_keys
          echo -n "$API_KEY_BASE64" | base64 --decode --output $API_KEY_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

      - name: Build/release Electron app
        # uses: kochie/action-electron-builder@1.8.0
        # with:
        #   # GitHub token, automatically provided to the action
        #   # (No need to define this secret in the repo settings)
        #   github_token: ${{ secrets.github_token }}

        #   # If the commit is tagged with a version (e.g. "v1.0.0"),
        #   # release the app after building
        #   release: ${{ startsWith(github.ref, 'refs/tags') }}

        #   mac_certs: ${{ secrets.mac_certs }}
        #   mac_certs_password: ${{ secrets.mac_certs_password }}

        #   package_manager: pnpm

        #   args: --config.mac.bundleVersion=
          # windows_certs: ${{ secrets.windows_certs }}
          # windows_certs_password: ${{ secrets.windows_certs_password }}
        run: |
          echo "Building for ${{ matrix.os }}"
          echo "Release: ${{ startsWith(github.ref, 'refs/tags') }}"
          echo "Pre-release: ${{ github.event.release.prerelease }}"
          echo "Run number: ${{ github.run_number }}"

          pnpm run build+release 
        env:
          # macOS notarization API key
          APPLE_API_KEY: private_keys/AuthKey_${{ secrets.api_key_id }}.p8
          APPLE_API_KEY_ID: ${{ secrets.api_key_id }}
          APPLE_API_ISSUER: ${{ secrets.api_key_issuer_id }}

          CSC_LINK: ${{ secrets.mac_certs }}
          CSC_KEY_PASSWORD: ${{ secrets.mac_certs_password }}

          BUNDLE_VERSION: ${{ github.run_number }}
          PRE_RELEASE: ${{ github.event.release.prerelease }}
          RELEASE: ${{ startsWith(github.ref, 'refs/tags') }}

          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.snapcraft_token }}
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

          NEXT_PUBLIC_USERPOOL_ID: ap-southeast-2_eZiuIIaCB
          NEXT_PUBLIC_USERPOOL_CLIENT_ID: ddodg8qtnqvjhtg876uc9g74c
          NEXT_PUBLIC_API_URL: https://api-prod.touch-typer.kochie.io/graphql
          NEXT_PUBLIC_ACCOUNT_LINK: https://touch-typer.kochie.io/account

      - name: Upload to App Store Connect
        if: startsWith(matrix.os, 'macos')
        run: |
          version=$(jq -r .version package.json)
          xcrun altool --validate-app -f dist/mas-universal/Touch\ Typer-$version-universal.pkg --type macos --apiKey ${{ secrets.api_key_id }} --apiIssuer ${{ secrets.api_key_issuer_id }} 
          xcrun altool --upload-app -f dist/mas-universal/Touch\ Typer-$version-universal.pkg --type macos --apiKey ${{ secrets.api_key_id }} --apiIssuer ${{ secrets.api_key_issuer_id }}

      - name: Upload to Windows Dev Center
        if: startsWith(matrix.os, 'windows')
        run: |
          $jsonContent = Get-Content -Path "$env:GITHUB_WORKSPACE\package.json" -Raw
          $jsonObject = $jsonContent | ConvertFrom-Json
          $version = $jsonObject.version
          $appx = "./dist/Touch Typer $version.appx"

          Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
          Install-Module -Name StoreBroker

          $password = ConvertTo-SecureString $env:APPX_UPLOAD_TOKEN -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential $env:APPX_UPLOAD_USERNAME, $password
          Set-StoreBrokerAuthentication -TenantId $env:APPX_UPLOAD_TENANT_ID -Credential $credential

          New-SubmissionPackage -ConfigPath build\store_broker\SBConfig.json -AppxPath $appx 

          Update-ApplicationSubmission -AppId $env:APPX_UPLOAD_APP_ID -SubmissionDataPath "build/submission.json" -PackagePath "build/submission.zip" -Force -ReplacePackages -UpdatePublishModeAndVisibility
        env:
          APPX_UPLOAD_TOKEN: ${{ secrets.windows_dev_center_password }}
          APPX_UPLOAD_USERNAME: ${{ secrets.windows_dev_center_username }}
          APPX_UPLOAD_TENANT_ID: ${{ secrets.windows_dev_center_tenant_id }}
          APPX_UPLOAD_APP_ID: "9NG3CCFL631D"
