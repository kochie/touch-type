name: Building Release

on:
  workflow_dispatch: {}
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3
      
      - uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: pnpm
          cache-dependency-path: ./pnpm-lock.yaml
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          {
            echo 'STORE_PATH<<EOF'
            pnpm store path --silent
            echo EOF 
          } >> $GITHUB_ENV
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install
        env:
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        # Only install Snapcraft on Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.snapcraft_token }}

      - uses: maxim-lobanov/setup-xcode@v1
        if: startsWith(matrix.os, 'macos')
        with:
          xcode-version: latest-stable

      - name: Prepare for app notarization
        if: startsWith(matrix.os, 'macos')
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.provisioning_profile }}
          PP_PATH: build/mastouchtyper.provisionprofile
          API_KEY_BASE64: ${{ secrets.api_key }}
          API_KEY_PATH: ~/private_keys/AuthKey_4R59VBAA4R.p8
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo -n "$API_KEY_BASE64" | base64 --decode --output $RUNNER_TEMP/AuthKey.p8
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH

      - name: Build/release Electron app
        uses: kochie/action-electron-builder@main
        with:
          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # If the commit is tagged with a version (e.g. "v1.0.0"),
          # release the app after building
          release: ${{ startsWith(github.ref, 'refs/tags') }}

          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}

          package_manager: pnpm

          # windows_certs: ${{ secrets.windows_certs }}
          # windows_certs_password: ${{ secrets.windows_certs_password }}
        env:
          # macOS notarization API key
          APPLE_API_KEY: $RUNNER_TEMP/AuthKey.p8
          APPLE_API_KEY_ID: ${{ secrets.api_key_id }}
          APPLE_API_ISSUER: ${{ secrets.api_key_issuer_id }}
          # macOS notarization credentials key details
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.snapcraft_token }}
          FONTAWESOME_NPM_AUTH_TOKEN: ${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }}

      - name: Upload error log
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: notarization-error.log
          path: notarization-error.log

      - name: Upload to App Store Connect
        if: startsWith(matrix.os, 'macos')
        run: |
          xcrun altool --validate-app -f dist/mas-universal/Touch\ Typer-${{github.ref_name}}-universal.pkg --type macos --apiKey ${{ secrets.api_key_id }} --apiIssuer ${{ secrets.api_key_issuer_id }} 
          xcrun altool --upload-app -f dist/mas-universal/Touch\ Typer-${{github.ref_name}}-universal.pkg --type macos --apiKey ${{ secrets.api_key_id }} --apiIssuer ${{ secrets.api_key_issuer_id }}

      - name: Upload to Windows Dev Center
        if: startsWith(matrix.os, 'windows')
        run: |
          Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
          Install-Module -Name StoreBroker
          $password = ConvertTo-SecureString ${{ secrets.windows_dev_center_password }} -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ${{ secrets.windows_dev_center_username }}, $password
          Set-StoreBrokerAuthentication -TenantId ${{ secrets.windows_dev_center_tenant_id }} -Credential $credential
          Update-ApplicationSubmission -AppId "9NG3CCFL631D" -SubmissionDataPath "build/submission.json" -PackagePath ".\dist\Touch Typer ${{ github.ref_name }}.appx" -AutoCommit -Force
